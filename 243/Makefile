#######################
# DO NOT EDIT THIS FILE
#######################

#   1) Make a copy of Makefile.paths.original
#      as Makefile.paths, which git will ignore.
#   2) Edit Makefile.paths to provide full paths to the root folders
#      of your local clones of the project repository and the mathbook
#      repository as described below.
#   3) The files Makefile and Makefile.paths.original
#      are managed by git revision control and any edits you make to
#      these will conflict. You should only be editing Makefile.paths.

##############
# Introduction
##############

# This is not a "true" makefile, since it does not
# operate on dependencies.  It is more of a shell
# script, sharing common configurations

######################
# System Prerequisites
######################

#   install         (system tool to make directories)
#   xsltproc        (xml/xsl text processor)
#   xmllint         (only to check source against DTD)
#   <helpers>       (PDF viewer, web browser, pager, Sage executable, etc)

#####
# Use
#####

#	A) Navigate to the location of this file
#	B) At command line:  make <some-target-from-the-options-below>

##################################################
# The included file contains customized versions
# of locations of the principal components of this
# project and names of various helper executables
##################################################
include Makefile.paths

###################################
# These paths are subdirectories of
# the project distribution
###################################
PRJSRC    = $(PRJ)/src
IMAGESSRC = $(PRJSRC)/images
OUTPUT    = $(PRJ)/output
XSL       = $(PRJ)/xsl
PUB       = $(PRJ)/publication

# The project's main hub file
MAINFILE  = $(PRJSRC)/syllabus.xml

# The project's styling files
PUBFILE   = $(PUB)/publication.xml
CSS       = $(PRJ)/css/syllabus.css
PRJXSL    = $(PRJ)/xsl
LATEX     = $(XSL)/syllabus-latex.xsl

# These paths are subdirectories of
# the Mathbook XML distribution
# MBUSR is where extension files get copied
# so relative paths work properly
MBXSL = $(PTX)/xsl
MBUSR = $(PTX)/user
DTD   = $(PTX)/schema/dtd

# These paths are subdirectories of the output
# folder for different output formats
PGOUT      = $(OUTPUT)/pg
HTMLOUT    = $(OUTPUT)/html
PDFOUT     = $(OUTPUT)/pdf
IMAGESOUT  = $(OUTPUT)/images
WWOUT      = $(OUTPUT)/webwork-representations

# Some aspects of producing these examples require a WeBWorK server.
# For all but trivial testing or examples, please look into setting
# up your own WeBWorK server, or consult Alex Jordan about the use
# of PCC's server in a nontrivial capacity.    <alex.jordan@pcc.edu>
SERVER = "(https://webwork.pcc.edu,anonymous,anonymous,anonymous,open)"
#SERVER = http://localhost

webwork-representations:
	-rm -r $(WWOUT) || :
	install -d $(WWOUT)
	$(PTX)/pretext/pretext -vv -a -c webwork -d $(WWOUT) -s $(SERVER) $(MAINFILE)

pg:
	install -d $(PGOUT)
	cd $(PGOUT); \
	rm -r Course-Information-and-Syllabus; \
	xsltproc --xinclude --stringparam chunk.level 2 $(MBXSL)/pretext-ww-problem-sets.xsl $(OUTPUT)/merge.xml

pdf:
	install -d $(OUTPUT)
	install -d $(PDFOUT)
	install -d $(PDFOUT)/images
	install -d $(IMAGESOUT)
	install -d $(IMAGESSRC)
	-rm $(PDFOUT)/images/*
	-rm $(PDFOUT)/*.*
	cp -a $(IMAGESOUT) $(PDFOUT)
#	cp -a $(WWOUT)/*.png $(PDFOUT)/images
#	cp -a $(IMAGESSRC) $(PDFOUT)
	cd $(PDFOUT); \
	xsltproc -xinclude $(LATEX) $(MAINFILE) > syllabus.tex; \
	xelatex syllabus.tex; \
	xelatex syllabus.tex



#  HTML output
#  Output lands in the subdirectory:  $(HTMLOUT)
html:
	install -d $(OUTPUT)
	install -d $(HTMLOUT)
	install -d $(HTMLOUT)/images
	install -d $(IMAGESOUT)
	install -d $(IMAGESSRC)
	-rm $(HTMLOUT)/*.html
	-rm $(HTMLOUT)/knowl/*.html
#	-rm $(HTMLOUT)/images/*
	-rm $(HTMLOUT)/*.css
#	cp -a $(IMAGESOUT) $(HTMLOUT)
#	cp -a $(IMAGESSRC) $(HTMLOUT)
#	cp -a $(WWOUT)/*.png $(HTMLOUT)/images
	cp -a $(CSS) $(HTMLOUT)
	cd $(HTMLOUT); \
	xsltproc -xinclude --stringparam publisher $(PUBFILE) --stringparam html.css.extra syllabus.css $(XSL)/syllabus-html.xsl $(MAINFILE)
#	xsltproc -xinclude --stringparam webwork.server https://webwork.pcc.edu --stringparam html.knowl.webwork.sectional yes --stringparam exercise.text.solution yes --stringparam html.knowl.exercise.inline no --stringparam html.knowl.example no $(XSL)/syllabus-html.xsl $(MAINFILE)

# make all the image files in svg format
images:
	install -d $(OUTPUT)
	install -d $(IMAGESOUT)
	-rm $(IMAGESOUT)/*.svg
#	$(MB)/script/mbx -c latex-image -f svg -d $(IMAGESOUT) $(MAINFILE)
	$(MB)/script/mbx -c latex-image -f svg -d $(IMAGESOUT) $(OUTPUT)/merge.xml
#	$(MB)/script/mbx -c asymptote -f svg -d $(IMAGESOUT) $(MAINFILE)

# run this to scrape thumbnail images from YouTube for any YouTube videos
youtube:
	install -d $(OUTPUT)
	install -d $(IMAGESOUT)
	-rm $(IMAGESOUT)/*.jpg
	$(MB)/script/mbx -c youtube -d $(IMAGESOUT) $(MAINFILE)


###########
# Utilities
###########

# Verify Source integrity
#   Leaves "dtderrors.txt" in OUTPUT
#   can then grep on, e.g.
#     "element XXX:"
#     "does not follow"
#     "Element XXXX content does not follow"
#     "No declaration for"
#   Automatically invokes the "less" pager, could configure as $(PAGER)
check:
	install -d $(OUTPUT)
	-rm $(OUTPUT)/jingreport.txt
	-java -classpath ~/jing-trang/build -Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration -jar ~/jing-trang/build/jing.jar $(MB)/schema/pretext.rng $(MAINFILE) > $(OUTPUT)/jingreport.txt
	less $(OUTPUT)/jingreport.txt

gource:
	install -d $(OUTPUT)
	-rm $(OUTPUT)/gource.mp4
	-gource --user-filter 'Stephen Simonds' --title ORCCA --key --background-image src/images/orca3.png --user-image-dir .git/avatar/ --hide filenames --seconds-per-day 0.2 --auto-skip-seconds 1 -1280x720 -o - | ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i - -vcodec libx264 -preset veryslow -pix_fmt yuv420p -crf 23 -threads 0 -bf 0 $(OUTPUT)/gource.mp4
	-mv gource.mp4 $(OUTPUT)/gource.mp4
    
